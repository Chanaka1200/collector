package main

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target bpfel -cc clang -type msg_type -type perf_measurement_msg -type task_metadata_msg -type task_free_msg bpf collector.c protocol.bpf.c task_metadata.bpf.c

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"log"
	"os"
	"os/signal"
	"time"
	"unsafe"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/rlimit"
	"github.com/unvariance/collector/pkg/aggregate"
	"github.com/unvariance/collector/pkg/perf_ebpf"
	"github.com/unvariance/collector/pkg/rmid"
	"github.com/xitongsys/parquet-go-source/local"
	"github.com/xitongsys/parquet-go/parquet"
	"github.com/xitongsys/parquet-go/source"
	"github.com/xitongsys/parquet-go/writer"
	"golang.org/x/sys/unix"
)

// MetricsRecord represents a single row in our parquet file
type MetricsRecord struct {
	StartTime    int64  `parquet:"name=start_time, type=INT64"`
	EndTime      int64  `parquet:"name=end_time, type=INT64"`
	PID          int32  `parquet:"name=pid, type=INT32, encoding=DELTA_BINARY_PACKED"`
	ProcessName  string `parquet:"name=process_name, type=BYTE_ARRAY, convertedType=UTF8, encoding=PLAIN_DICTIONARY"`
	Cycles       int64  `parquet:"name=cycles, type=INT64"`
	Instructions int64  `parquet:"name=instructions, type=INT64"`
	LLCMisses    int64  `parquet:"name=llc_misses, type=INT64"`
	Duration     int64  `parquet:"name=duration, type=INT64"`
}

// parquetWriter wraps parquet file writing functionality
type parquetWriter struct {
	file   source.ParquetFile
	writer *writer.ParquetWriter
}

// newParquetWriter creates a new parquet writer with the given filename
func newParquetWriter(filename string) (*parquetWriter, error) {
	file, err := local.NewLocalFileWriter(filename)
	if err != nil {
		return nil, fmt.Errorf("failed to create parquet file: %w", err)
	}

	// Create parquet writer with 8MB row group size and Snappy compression
	pw, err := writer.NewParquetWriter(file, new(MetricsRecord), 8*1024*1024)
	if err != nil {
		file.Close()
		return nil, fmt.Errorf("failed to create parquet writer: %w", err)
	}

	// Set Snappy compression
	pw.CompressionType = parquet.CompressionCodec_SNAPPY

	return &parquetWriter{
		file:   file,
		writer: pw,
	}, nil
}

// writeTimeSlot writes a single time slot to the parquet file
func (pw *parquetWriter) writeTimeSlot(slot *aggregate.TimeSlot, taskTracker *rmid.Tracker) error {
	// Write measurements for this slot
	for pid, agg := range slot.Aggregations {
		// Look up metadata for this PID
		meta, exists := taskTracker.GetMetadata(uint32(pid))

		// Default values if metadata doesn't exist
		processName := ""
		if exists {
			processName = meta.Comm
		}

		record := &MetricsRecord{
			StartTime:    int64(slot.StartTime),
			EndTime:      int64(slot.EndTime),
			PID:          int32(pid),
			ProcessName:  processName,
			Cycles:       int64(agg.Cycles),
			Instructions: int64(agg.Instructions),
			LLCMisses:    int64(agg.LLCMisses),
			Duration:     int64(agg.Duration),
		}
		if err := pw.writer.Write(record); err != nil {
			return fmt.Errorf("failed to write record: %w", err)
		}
	}
	return nil
}

// writeCompletedSlots writes completed time slots to parquet
func writeCompletedSlots(pw *parquetWriter, slots []*aggregate.TimeSlot, taskTracker *rmid.Tracker) error {
	for _, slot := range slots {
		// Advance task tracker to match this slot's end time
		taskTracker.Advance(slot.EndTime)

		if err := pw.writeTimeSlot(slot, taskTracker); err != nil {
			return fmt.Errorf("failed to write time slot: %w", err)
		}
	}
	return nil
}

// close properly closes the parquet writer and underlying file
func (pw *parquetWriter) close() error {
	if err := pw.writer.WriteStop(); err != nil {
		pw.file.Close()
		return fmt.Errorf("failed to stop parquet writer: %w", err)
	}
	return pw.file.Close()
}

// Note: bpfPerfMeasurementMsg is auto-generated by bpf2go
// Note: bpfTaskMetadataMsg is auto-generated by bpf2go
// Note: bpfTaskFreeMsg is auto-generated by bpf2go

// nanotime returns monotonic time in nanoseconds. We get this from the runtime
//
//go:linkname nanotime runtime.nanotime
func nanotime() int64

// dumpTaskTracker dumps all tasks and their metadata from the tracker
func dumpTaskTracker(tracker *rmid.Tracker) {
	log.Println("Dumping task tracker state:")
	log.Println("PID\tComm\tValid")
	log.Println("---\t----\t-----")

	// Get all task metadata from the tracker
	tasks := tracker.GetAllMetadata()

	for pid, meta := range tasks {
		log.Printf("%d\t%s\t%v\n",
			pid, meta.Comm, meta.Valid)
	}
	log.Println("") // Add blank line after dump
}

func main() {
	// Allow the current process to lock memory for eBPF resources
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Create parquet writer
	pw, err := newParquetWriter("metrics.parquet")
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := pw.close(); err != nil {
			log.Printf("Error closing parquet writer: %v", err)
		}
	}()

	// Load pre-compiled programs and maps into the kernel
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatal(err)
	}
	defer objs.Close()

	// -- Set up perf rings for ebpf -> userspace --
	// Create a ReaderOptions with a large Watermark
	perCPUBufferSize := 16 * os.Getpagesize()
	opts := perf_ebpf.Options{
		BufferSize:     perCPUBufferSize,
		WatermarkBytes: uint32(perCPUBufferSize / 2),
	}

	// Create our perf map reader
	rd, err := perf_ebpf.NewPerfMapReader(objs.Events, opts)
	if err != nil {
		log.Fatal(err)
	}
	defer rd.Close()

	// -- Create the perf events for ebpf to read hardware counters --
	commonOpts := unix.PerfEventAttr{
		Sample:      0,
		Sample_type: 0,
		Read_format: unix.PERF_FORMAT_TOTAL_TIME_ENABLED | unix.PERF_FORMAT_TOTAL_TIME_RUNNING,
		Bits:        0,
		Wakeup:      0,
		Bp_type:     0,
		Ext1:        0,
		Ext2:        0,
	}

	// Open cycles counter
	cyclesAttr := commonOpts
	cyclesAttr.Type = unix.PERF_TYPE_HARDWARE
	cyclesAttr.Config = unix.PERF_COUNT_HW_CPU_CYCLES
	cyclesOpener, err := perf_ebpf.NewEventOpener(objs.Cycles, cyclesAttr)
	if err != nil {
		log.Fatal(err)
	}
	defer cyclesOpener.Close()

	// Open instructions counter
	instrAttr := commonOpts
	instrAttr.Type = unix.PERF_TYPE_HARDWARE
	instrAttr.Config = unix.PERF_COUNT_HW_INSTRUCTIONS
	instrOpener, err := perf_ebpf.NewEventOpener(objs.Instructions, instrAttr)
	if err != nil {
		log.Fatal(err)
	}
	defer instrOpener.Close()

	// Open LLC misses counter
	llcAttr := commonOpts
	llcAttr.Type = unix.PERF_TYPE_HARDWARE
	llcAttr.Config = unix.PERF_COUNT_HW_CACHE_MISSES
	llcOpener, err := perf_ebpf.NewEventOpener(objs.LlcMisses, llcAttr)
	if err != nil {
		log.Fatal(err)
	}
	defer llcOpener.Close()

	// -- Create the aggregator for the hardware counters --
	aggregatorConfig := aggregate.Config{
		SlotLength: 1_000_000, // 1ms in nanoseconds
		WindowSize: 4,         // Keep 4 slots (4ms total)
		SlotOffset: 0,
	}
	aggregator, err := aggregate.NewAggregator(aggregatorConfig)
	if err != nil {
		log.Fatal(err)
	}

	// -- Track task metadata --
	taskTracker := rmid.NewTracker()

	// Attach the process exit tracepoint
	exitTp, err := link.AttachRawTracepoint(link.RawTracepointOptions{
		Name:    "sched_process_free",
		Program: objs.HandleProcessFree,
	})
	if err != nil {
		log.Fatalf("Failed to attach process exit tracepoint: %v", err)
	}
	defer exitTp.Close()

	// Catch CTRL+C
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt)

	timeout := time.After(5 * time.Second)
	ticker := time.NewTicker(100 * time.Millisecond)
	defer ticker.Stop()

	// Counter to maintain in userspace
	var totalEvents uint64 = 0

	// Start the reader
	reader := rd.Reader()

	// Attach the perf-counter measurement program
	tp, err := link.Tracepoint("sched", "sched_switch", objs.MeasurePerf, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer tp.Close()

	log.Println("Waiting for events...")

	for {
		select {
		case <-stopper:
			log.Printf("Received interrupt, exiting... Total events: %d\n", totalEvents)
			// Write any remaining slots before exiting
			if err := writeCompletedSlots(pw, aggregator.Reset(), taskTracker); err != nil {
				log.Printf("Error writing final time slots: %v", err)
			}
			// Dump final task state
			dumpTaskTracker(taskTracker)
			return
		case <-timeout:
			log.Println("Finished counting after 5 seconds")
			// Write any remaining slots before exiting
			if err := writeCompletedSlots(pw, aggregator.Reset(), taskTracker); err != nil {
				log.Printf("Error writing final time slots: %v", err)
			}
			// Dump final task state
			dumpTaskTracker(taskTracker)
			return
		case <-ticker.C:
			// Get current monotonic timestamp before starting the batch
			startTimestamp := uint64(nanotime())

			log.Printf("Starting batch at timestamp: %d", startTimestamp)

			if err := reader.Start(); err != nil {
				log.Fatal(err)
			}

			// Process all available events that occurred before startTimestamp
			for !reader.Empty() {
				// Check if next event's timestamp is after our start timestamp
				ts, err := reader.PeekTimestamp()
				if err != nil {
					log.Printf("Error peeking timestamp: %s", err)
					break
				}

				// Skip processing this batch if we see an event from the future
				if ts > startTimestamp {
					break
				}

				ring, cpuID, err := reader.CurrentRing()
				if err != nil {
					log.Printf("Error getting current ring: %s", err)
					break
				}

				// Check for lost samples
				if ring.PeekType() == perf_ebpf.PERF_RECORD_LOST {
					var lostCount uint64
					if err := ring.PeekCopy((*[8]byte)(unsafe.Pointer(&lostCount))[:], 8); err != nil {
						log.Printf("Error reading lost count: %s", err)
					} else {
						log.Printf("Lost %d samples on CPU %d", lostCount, cpuID)
					}
					reader.Pop()
					continue
				}

				// Parse the raw event
				size, err := ring.PeekSize()
				if err != nil {
					log.Printf("Error getting event size: %s", err)
					break
				}

				eventData := make([]byte, size-4)
				if err := ring.PeekCopy(eventData, 4); err != nil {
					log.Printf("Error copying event data: %s", err)
					break
				}

				// Read message type
				var msgType uint32
				if err := binary.Read(bytes.NewReader(eventData[8:12]), binary.LittleEndian, &msgType); err != nil {
					log.Printf("Failed to parse message type: %s", err)
					break
				}

				switch bpfMsgType(msgType) {
				case bpfMsgTypeMSG_TYPE_PERF: // MSG_TYPE_PERF
					var event bpfPerfMeasurementMsg
					if err := binary.Read(bytes.NewReader(eventData), binary.LittleEndian, &event); err != nil {
						log.Printf("Failed to parse perf event: %s", err)
						break
					}

					// Create measurement from event
					measurement := &aggregate.Measurement{
						PID:          event.Pid, // Use PID as the key
						Cycles:       event.CyclesDelta,
						Instructions: event.InstructionsDelta,
						LLCMisses:    event.LlcMissesDelta,
						Timestamp:    event.Timestamp,
						Duration:     event.TimeDeltaNs,
					}

					// Advance window and write any completed slots
					if completedSlots := aggregator.AdvanceWindow(event.Timestamp, event.TimeDeltaNs); len(completedSlots) > 0 {
						if err := writeCompletedSlots(pw, completedSlots, taskTracker); err != nil {
							log.Printf("Error writing completed time slots: %v", err)
						}
					}

					// Update aggregator with the measurement
					if err := aggregator.UpdateMeasurement(measurement); err != nil {
						log.Printf("Error updating aggregator: %s", err)
					}

					totalEvents++

				case bpfMsgTypeMSG_TYPE_TASK_METADATA:
					var msg bpfTaskMetadataMsg
					if err := binary.Read(bytes.NewReader(eventData), binary.LittleEndian, &msg); err != nil {
						log.Printf("Failed to parse task metadata message: %s", err)
						break
					}
					// Convert comm to string
					commBytes := make([]byte, len(msg.Comm))
					for i, b := range msg.Comm {
						commBytes[i] = byte(b)
					}
					comm := string(bytes.TrimRight(commBytes, "\x00"))
					taskTracker.Alloc(msg.Pid, comm, msg.Timestamp)

				case bpfMsgTypeMSG_TYPE_TASK_FREE:
					var msg bpfTaskFreeMsg
					if err := binary.Read(bytes.NewReader(eventData), binary.LittleEndian, &msg); err != nil {
						log.Printf("Failed to parse task free message: %s", err)
						break
					}
					taskTracker.Free(msg.Pid, msg.Timestamp)

				default:
					log.Printf("Unknown message type: %d", msgType)
				}

				reader.Pop()
			}

			if err := reader.Finish(); err != nil {
				log.Printf("Error finishing reader: %s", err)
			}

			// Output counts every second
			var count uint64
			var key uint32 = 0
			if err := objs.EventCount.Lookup(&key, &count); err != nil {
				log.Fatal(err)
			}
			log.Printf("Event count: userspace %d, eBPF %d\n", totalEvents, count)
		}
	}
}
