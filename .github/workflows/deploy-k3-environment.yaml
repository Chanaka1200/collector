name: Test Kernel Module with Microservices
on: 
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 'm7i.xlarge'
        type: string
      run-benchmarks:
        description: 'Run sync timer benchmarks'
        required: true
        default: true
        type: boolean
      benchmark-duration:
        description: 'Duration for each benchmark test'
        required: false
        default: '10'
        type: choice
        options:
          - '1'
          - '10'
          - '100'
      users:
        description: 'Number of concurrent users for load generator'
        required: false
        default: '200'
        type: string
      rate:
        escription: 'Request per second'
        required: false
        default: '1'
        type: string

  push:
    branches:
      - main
    paths:
      - module/**
      - .github/workflows/deploy-k3-environment.yaml

permissions:
  id-token: write # Required for requesting the JWT

jobs:
  start-runner:
    name: Start EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-runner-session

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2.3.8
        with:
          mode: start
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          ec2-image-id: ami-0884d2865dbe9de4b  # Ubuntu 22.04 LTS in us-east-2
          ec2-instance-type: ${{ inputs.instance-type || 'm7i.xlarge' }}  # m7i.metal-24xl for RDT, c5.9xlarge for perf support
          market-type: spot
          subnet-id: ${{ secrets.AWS_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "github-runner"},
              {"Key": "Repository", "Value": "${{ github.repository }}"},
              {"Key": "Workflow", "Value": "${{ github.workflow }}"},
              {"Key": "RunId", "Value": "${{ github.run_id }}"},
              {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
              {"Key": "SHA", "Value": "${{ github.sha }}"},
              {"Key": "Branch", "Value": "${{ github.ref_name }}"},
              {"Key": "Actor", "Value": "${{ github.actor }}"}
            ]
  init-ebpf:
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Disable IPv6
        run: |
          # Disable IPv6 via sysctl
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1

          # Force apt to use IPv4
          echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99force-ipv4

      - name: Install dependencies
        run: |
          # Update all archive URLs to use HTTPS in both old and new locations
          sudo find /etc/apt/sources.list /etc/apt/sources.list.d/ -type f -exec sed -i 's/http:/https:/g' {} +
          sudo apt-get update
          sudo apt-get install -y build-essential linux-headers-$(uname -r) \
            golang-go llvm clang libbpf-dev git vim curl kmod unzip

      - name: Install pqrs
        run: |
          # Download latest pqrs release
          curl -L -o pqrs.zip https://github.com/manojkarthick/pqrs/releases/download/v0.3.2/pqrs-0.3.2-x86_64-unknown-linux-gnu.zip
          unzip pqrs.zip
          sudo mv pqrs-0.3.2-x86_64-unknown-linux-gnu/bin/pqrs /usr/local/bin/
          rm pqrs.zip

      - name: Build kernel module
        working-directory: module
        run: |
          # Try to compile and capture the warning message
          make 2>&1 | tee compile_output.txt || true
          
          # Extract gcc version from the warning message
          KERNEL_GCC_VERSION=$(grep "The kernel was built by:" compile_output.txt | grep -oP 'gcc-\K\d+' || echo "")
          echo "Detected kernel compiler version: ${KERNEL_GCC_VERSION}"
          
          # Install specific gcc version if detected
          if [ ! -z "$KERNEL_GCC_VERSION" ]; then
            echo "Installing gcc-${KERNEL_GCC_VERSION}"
            sudo apt-get install -y gcc-${KERNEL_GCC_VERSION}
            
            # Configure as default gcc
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${KERNEL_GCC_VERSION} 100
            sudo update-alternatives --set gcc /usr/bin/gcc-${KERNEL_GCC_VERSION}
          else
            echo "Warning: Could not detect kernel compiler version"
          fi
          
          # Verify gcc version
          gcc --version
          
          # Now try the actual build
          make

          ls -l build/collector.ko

      - name: Listing Folders
        run: |
          # Move into the cloned repository
          ls -al
          pwd
      
  k3-deployment:
    needs: [start-runner,init-ebpf]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
    
      - name: Install K3 Cluster
        run: |
          # Installs K3s (a lightweight Kubernetes distribution) on the system
          curl -sfL https://get.k3s.io | sh

      - name: Install K3 Cluster
        run: |
          # Status of K3s Instalation
          systemctl status k3s  
      
      - name: Get Default objects in kube-system
        run: | 
          kubectl get all -n kube-system

  microservice-deployment:
    needs: [start-runner,init-ebpf, k3-deployment]
    runs-on: ${{ needs.start-runner.outputs.label }}
    env:
      MY_ENV_VAR: "Production"
    steps:

      - name: Clone Repository
        run: |
          # Set Git URL (modify or pass as argument)
          GIT_URL="https://github.com/GoogleCloudPlatform/microservices-demo.git"
          
          # Clone the repository
          git clone "$GIT_URL"

          # Extract the folder name from the URL (remove .git at the end if present)
          FOLDER_NAME=$(basename "$GIT_URL" .git)

          # Save the variable as an output for later steps
          echo "FOLDER_NAME=$FOLDER_NAME" >> $GITHUB_ENV
      
      - name: Use input
        run: echo "Input was ${{ github.event.inputs.users }}"
        
      - name: Print env var
        run: echo "Environment is $MY_ENV_VAR"

      - name: Install Micro Services
        run: |
          # Move into the cloned repository
          cd "$FOLDER_NAME"

          # Confirm current directory
          echo "Switched to directory: $(pwd)"

          # Ensure the file exists before modifying
          if [ ! -f kubernetes-manifests/loadgenerator.yaml ]; then
            echo "Error: kubernetes-manifests/loadgenerator.yaml not found!"
            exit 1
          fi

          # Debug: Print original file content
          echo "üîç Original loadgenerator.yaml:"
          cat kubernetes-manifests/loadgenerator.yaml

          # Apply load generator environment variables
          #sed -i "s|\(name: USERS\s*value: \)\"[0-9]\+\"|\1\"${{ github.event.inputs.users }}\"|" kubernetes-manifests/loadgenerator.yaml
          sed -i "s|value: \"10\"|value: \"${{ github.event.inputs.users }}\"|" kubernetes-manifests/loadgenerator.yaml
          #sed -i "s|\(name: RATE\s*value: \)\"[0-9]\+\"|\1\"${{ github.event.inputs.rate }}\"|" kubernetes-manifests/loadgenerator.yaml

          # Debug: Print modified file content
          echo "‚úÖ Updated loadgenerator.yaml:"
          cat kubernetes-manifests/loadgenerator.yaml

          # Installs micro-services (Uncomment when ready)
          # kubectl apply -f release/kubernetes-manifests.yaml
          
          
      - name: Print Pod Status
        run: | 
          kubectl get pods -n default

      - name: Accisible URL
        run: |
          # Get accessible URL 
          echo "http://$(kubectl get svc frontend-external --no-headers -o wide | awk '{print $4}')"
  test-ebpf:
    needs: [start-runner,init-ebpf, k3-deployment, microservice-deployment]
    runs-on: ${{ needs.start-runner.outputs.label }}
    timeout-minutes: 10
    steps:

      - name: Listing Folders
        run: |
          # Move into the cloned repository
          ls -al
          pwd

  stop-runner:
    name: Stop EC2 runner
    needs: [start-runner, init-ebpf, k3-deployment, microservice-deployment, test-ebpf]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-runner-session

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2.3.8
        with:
          mode: stop
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }} 