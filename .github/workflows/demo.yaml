name: demo
on: 
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 'c5.9xlarge'
        type: string

permissions:
  id-token: write # Required for requesting the JWT
  contents: read
  actions: write

jobs:
  setup-runner:
    name: Start EC2 runner
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-runner.outputs.runner-label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Start AWS Runner
        id: start-runner
        uses: ./.github/actions/aws-runner
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          subnet-id: ${{ secrets.AWS_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          instance-type: ${{ inputs.instance-type || 'c5.9xlarge' }}
          aws-image-id: 'ami-0884d2865dbe9de4b'  # Ubuntu 22.04 LTS in us-east-2
          volume-size: '16'

  k3-deployment:
    needs: [setup-runner]
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    timeout-minutes: 10
    steps:

      - name: Download kustomize binary
        run: | 
          curl -LO https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.6.0/kustomize_v5.6.0_linux_amd64.tar.gz

      - name: Extract kustomize
        run: |
          ls -al
          tar -xvzf kustomize_v5.6.0_linux_amd64.tar.gz
          sudo mv kustomize /usr/local/bin/

      - name: Check the version of kustomize
        run: |
          kustomize version

      - name: Install K3 Cluster
        run: |
          # Installs K3s (a lightweight Kubernetes distribution) on the system
          curl -sfL https://get.k3s.io | sh

      - name: Install K3 Cluster
        run: |
          # Status of K3s Instalation
          systemctl status k3s  
      
      - name: Get Default objects in kube-system
        run: | 
          kubectl get all -n kube-system


  microservice-deployment:
    needs: [setup-runner,k3-deployment]
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    timeout-minutes: 10
    env:
      USERS: 3000000
      RATE: 10000
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone Repository
        run: |
          # Set Git URL (modify or pass as argument)
          GIT_URL="https://github.com/GoogleCloudPlatform/microservices-demo.git"
          
          # Clone the repository
          git clone "$GIT_URL"

          # Extract the folder name from the URL (remove .git at the end if present)
          FOLDER_NAME=$(basename "$GIT_URL" .git)

          # Save the variable as an output for later steps
          echo "FOLDER_NAME=$FOLDER_NAME" >> $GITHUB_ENV

      - name: Install Micro Services
        run: |

          # copy kustomized file to location
          cp -f kustomize/kustomization.yaml "$FOLDER_NAME/kustomize/kustomization.yaml"

          # Move into the cloned repository
          cd "$FOLDER_NAME"

          # Confirm current directory
          echo "Switched to directory: $(pwd)"

          # Installs micro-services (Uncomment when ready)
          cd kustomize && kustomize build . | kubectl apply -f -
          

      - name: Wait for all Pods to be Ready
        run: |
          sleep $((3 * 60))

      - name: Print Events
        run: | 
          kubectl get events

      - name: Disk Space Size
        run: | 
          df -h

      - name: Print Pod Status
        run: | 
          kubectl get pods -n default
      
      - name: Describe one of deployment
        run: |
          kubectl describe deployment adservice

      - name: Describe one of deployment load generator
        run: |
          kubectl describe deployment loadgenerator
          
      - name: Accisible URL
        run: |
          # Get accessible URL 
          echo "http://$(kubectl get svc frontend-external --no-headers -o wide | awk '{print $4}')"

  stop-runner:
    name: Stop EC2 runner
    needs: [setup-runner, k3-deployment, microservice-deployment]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Stop AWS Runner
        uses: ./.github/actions/aws-runner/cleanup
        with:
          runner-label: ${{ needs.start-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }} 
